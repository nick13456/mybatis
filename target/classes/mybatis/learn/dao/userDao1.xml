<?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE mapper
                PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mybatis.learn.dao.UserDao"  >    <!--是包的全路径名-->

    <cache/>

    <resultMap id="userMap" type="user">
        <id property="id" column="id"/>
        <result column="sex" property="sex"/>
        <result column="birthday" property="birthday"/>
        <result column="address" property="address"/>
        <result column="username" property="username"/>
<!--        配置user对象中account集合的映射-->
        <collection property="accountList" ofType="account">
            <id column="aid"  property="aid"/>
            <result column="uid" property="uid"/>
            <result column="money" property="money"/>
        </collection>
        <collection property="roleTList" ofType="rolet">
            <id column="rid"  property="roleId"/>
            <result column="role_name" property="roleName"/>
            <result column="role_desc" property="roleDesc"/>
        </collection>
    </resultMap>
    <resultMap id="userMapLazy" type="user">
        <id property="id" column="id"/>
        <result column="sex" property="sex"/>
        <result column="birthday" property="birthday"/>
        <result column="address" property="address"/>
        <result column="username" property="username"/>
        <!--        配置user对象中account集合的映射-->
        <collection column="id" property="accountList" ofType="account" javaType="List" select="mybatis.learn.dao.AccountDao.findAccountByUid"/>

        <collection property="roleTList" ofType="rolet">
            <id column="rid"  property="roleId"/>
            <result column="role_name" property="roleName"/>
            <result column="role_desc" property="roleDesc"/>
        </collection>
    </resultMap>
    <sql id="defaultUser">
        select * from user
    </sql>

<!--    <select id="findAll" resultMap="userMapLazy" useCache="true">-->
<!--        <include refid="defaultUser"/>-->
<!--    </select>          &lt;!&ndash; id的取值必须是UserDao方法的名字&ndash;&gt;-->

    <select id="findAllRole" resultMap="userMap" >
        select r.id as rid, r.role_name,r.role_desc,u.* from user u left outer join user_role ur on u.id=ur.uid
        left outer join rolet r on r.id=ur.rid
    </select>

<!--    <select id="findUserAccount" resultMap="userMap">-->
<!--        select a.id as aid,a.uid,a.money,u.* from user u left outer join account a on u.id=a.uid-->
<!--    </select>-->

    <insert id="saveUser" parameterType="user">                <!--使用了别名user，就是mybatis.learn.domain.User-->
        <selectKey keyProperty="id" keyColumn="id" resultType="Integer" order="AFTER">
            select last_insert_id();   <!--配置插入操作后读取插入的id-->
        </selectKey>
        insert into user(username,birthday,sex,address)values(#{username},#{birthday},#{sex},#{address})
    </insert>

    <update id="updateUser" parameterType="mybatis.learn.domain.User">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
    </update>

    <delete id="deleteById" parameterType="Integer">
        delete from user where id=#{userId}
    </delete>

    <select id="selectByName" resultType="mybatis.learn.domain.User" parameterType="String">
        select * from user where username like #{username}
    </select>

    <select id="findByVo" parameterType="mybatis.learn.domain.QueryVo" resultType="mybatis.learn.domain.User">
        select * from user where username like #{user.username}
    </select>

    <select id="findByCondition" parameterType="mybatis.learn.domain.User" resultType="mybatis.learn.domain.User">
        select * from user
        <where>
            <if test="username!=null">
                and  username like #{username}
            </if>
            <if test="sex != null">
                and sex like #{sex}
            </if>
        </where>
    </select>

</mapper>